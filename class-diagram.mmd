
classDiagram
direction TB

class User {
    <<Abstract>>
    +String walletAddress
}

class Issuer {
    +String issuerId
    +String name
    +String publicKey
    +bool isActive
    +uploadCertificate(file)
    +provideMetadata(data)
}

class Holder {
    +NFT[] ownedNFTs
    +receiveNFT(nft)
    +provideOriginalFile(tokenId)
}

class Verifier {
    +verifyCertificate(tokenId, originalFile)
    +verifyByCid(tokenId)
}

class CertificateNFT {
    <<SmartContract ERC-721/SBT>>
    +uint256 tokenId
    +address owner
    +string tokenURI
    +bytes32 certificateHash
    +address issuer
    +bool isRevoked

    +mint(to, uri, certificateHash)
    +revoke(tokenId, reason)
    +ownerOf(tokenId)
    +isValid(tokenId) bool
    +setIssuer(address issuer, bool enabled)
}

class AccessControl {
    <<Library>>
    +grantRole(role, account)
    +revokeRole(role, account)
    +hasRole(role, account) bool
}

class BackendAPI {
    <<Service>>
    -IPFSService ipfsService
    -OffchainIndex index
    +handleCertificateUpload(file)
    +computeFileHash(file) bytes32
    +generateMetadata(data) json
    +buildTokenURI(cidJson) string
    +callMintFunction(to, uri, certificateHash)
    +listenToContractEvents()
    +verify(tokenId, originalFile?) VerificationResult
}

class IPFSService {
    <<Helper>>
    +string pinFile(file)
    +string pinJSON(json)
    +{cid, ok} pinAndVerify(content)
}

class OffchainIndex {
    <<Database/Index>>
    +storeIssuanceRecord(record)
    +getRecordByTokenId(tokenId)
    +getByFileHash(hash)
    +updateFromEvent(event)
}

User <|-- Issuer
User <|-- Holder
User <|-- Verifier

Issuer --|> BackendAPI : interacts with
BackendAPI o-- IPFSService : uses
BackendAPI o-- OffchainIndex : uses
BackendAPI --|> CertificateNFT : calls mint/revoke
CertificateNFT ..|> AccessControl : uses

Holder "1" -- "0..*" CertificateNFT : owns
Verifier --|> CertificateNFT : queries
Verifier ..> Holder : requests original file
Verifier ..> IPFSService : (optional) fetch file by CID
